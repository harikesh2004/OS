//bankers algorithm
#include<stdio.h>

#define MAX_PROCESSES 10
#define MAX_RESOURCES 10

int n, m; // Number of processes and resources
int available[MAX_RESOURCES];
int max[MAX_PROCESSES][MAX_RESOURCES];
int allocation[MAX_PROCESSES][MAX_RESOURCES];
int need[MAX_PROCESSES][MAX_RESOURCES];

int is_safe() {
    int work[MAX_RESOURCES];
    int finish[MAX_PROCESSES] = {0};
    int i, j, k;

    for (i = 0; i < m; i++)
        work[i] = available[i];

    int count = 0;
    while (count < n) {
        int found = 0;
        for (i = 0; i < n; i++) {
            if (!finish[i]) {
                int can_allocate = 1;
                for (j = 0; j < m; j++) {
                    if (need[i][j] > work[j]) {
                        can_allocate = 0;
                        break;
                    }
                }
                if (can_allocate) {
                    for (k = 0; k < m; k++)
                        work[k] += allocation[i][k];
                    finish[i] = 1;
                    found = 1;
                    count++;
                }
            }
        }
        if (!found)
            return 0; // Deadlock detected
    }
    return 1; // System is in safe state
}

int main() {
    int i, j;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    printf("Enter number of resources: ");
    scanf("%d", &m);

    printf("Enter available resources: ");
    for (i = 0; i < m; i++)
        scanf("%d", &available[i]);

    printf("Enter maximum resources needed by each process:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++)
            scanf("%d", &max[i][j]);

    printf("Enter resources currently allocated to each process:\n");
    for (i = 0; i < n; i++)
        for (j = 0; j < m; j++) {
            scanf("%d", &allocation[i][j]);
            need[i][j] = max[i][j] - allocation[i][j];
        }

    if (is_safe())
        printf("System is in a safe state\n");
    else
        printf("Deadlock detected\n");

    return 0;

}
